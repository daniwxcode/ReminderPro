@page "/ApiEdit"
@inject RemindServices RemindServices
@inject IModalService ModalService

    <div class="card">
        <div class="card-header">
          <label class="text-@(IsDisabled?"danger":"default")">@Message </label>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label>Canal</label>
                <select class="form-control" @bind="api.Cannal" disabled="@IsDisabled">
                    <option value="@Cannal.SMS">@Cannal.SMS.ToString()</option>
                    <option value="@Cannal.Mail">@Cannal.Mail.ToString()</option>
                </select>
            </div>
            <div class="form-group">
                <label>Libelle</label>
                <input @bind="@api.Name" type="text" class="form-control" disabled="@IsDisabled" />
            </div>
            <div class="form-group">
                <label>Cl&eacute;</label>
                <input @bind="@api.KeySecret" type="text" class="form-control" disabled="@IsDisabled" />
            </div>

            <div class="form-group">
                <label>Url</label>
                <input @bind="@api.Url" type="url" class="form-control" disabled="@IsDisabled" />
            </div>
            <button @onclick="@ValidateAsync" class="@(IsDisabled?"btn btn-danger":"btn btn-primary")">@valider</button>
            <button @onclick="@Cancel" class="btn btn-secondary">Annuler</button>
        </div>
    </div>
@code {

    [CascadingParameter]
    ModalParameters Parameters { get; set; }
    int ApiID { get; set; }
    string valider ="Enregistrer";
    string Message ="";
    bool IsDisabled=false;
    Api api { get; set; }

    protected override void OnInitialized ()
    {
        
        switch (Parameters.Get<Actions>("Action"))
        {
            case Actions.New:
                {
                    api = new Api();
                    Message= "Enregistrer un nouvel API";
                    break;
                }
            case Actions.Edit:
                {
                    ApiID = Parameters.Get<int>("ApiID");
                    api = RemindServices.GetApiAsync().Result.FirstOrDefault(p => p.ID == ApiID);
                    Message= $"Modification de l'API: {api.Name}";
                    break;
                }
            case Actions.Delete:
                {
                    ApiID = Parameters.Get<int>("ApiID");
                    api = RemindServices.GetApiAsync().Result.FirstOrDefault(p => p.ID == ApiID);
                    valider="Supprimer";
                    Message= " Voulez vous vraiment supprimer cet API ";
                    IsDisabled= true;
                    break;
                }
            default:
                {
                    return ;              }
        }

    }



    async void ValidateAsync ()
    {
        switch (Parameters.Get<Actions>("Action"))
        {
            case Actions.New:
                {
                    RemindServices.Save(api);
                    break;
                }
            case Actions.Edit:
                {
                    RemindServices.Save(api);
                    break;
                }
            case Actions.Delete:
                {
                     RemindServices.Delete(api);
                    break;
                }
            default:
                {
                    return ;              }
        }
        var liste = await RemindServices.GetApiAsync();
        ModalService.Close(ModalResult.Ok<List<Api>>(liste));
    }

    void Cancel ()
    {
        ModalService.Cancel();
    }

}