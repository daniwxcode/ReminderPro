@page "/EngagementEdit"
@inject RemindServices RemindServices
@inject IModalService ModalService

    <div class="card">
        <div class="card-header">
          <label class="text-@(IsDisabled?"danger":"default")">@Message </label>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label>Libelle</label>
                <input @bind="@Engagement.Libelle" type="text" class="form-control" disabled="@IsDisabled"/>
            </div>
            <div class="form-group">
                <label>Cl&eacute;</label>
                <input @bind="@Engagement.Code" type="text" class="form-control" disabled="@IsDisabled"/>
            </div>
            <button @onclick="@ValidateAsync" class="@(IsDisabled?"btn btn-danger":"btn btn-primary")">@valider</button>
            <button @onclick="@Cancel" class="btn btn-secondary">Annuler</button>
        </div>
    </div>
@code {

    [CascadingParameter]
    ModalParameters Parameters { get; set; }
    int EngagementID { get; set; }
    string valider ="Enregistrer";
    string Message ="";
    bool IsDisabled=false;
    Engagement Engagement { get; set; }

    protected override void OnInitialized ()
    {
        
        switch (Parameters.Get<Actions>("Action"))
        {
            case Actions.New:
                {
                    Engagement = new Engagement();
                    Message= "Enregistrer un nouvel Engagement";
                    break;
                }
            case Actions.Edit:
                {
                    EngagementID = Parameters.Get<int>("EngagementID");
                    Engagement = RemindServices.GetEngagAsync().Result.FirstOrDefault(p => p.ID == EngagementID);
                    Message= $"Modification de l'Engagement: {Engagement.Libelle}";
                    break;
                }
            case Actions.Delete:
                {
                    EngagementID = Parameters.Get<int>("EngagementID");
                    Engagement = RemindServices.GetEngagAsync().Result.FirstOrDefault(p => p.ID == EngagementID);
                    valider="Supprimer";
                    Message= " Voulez vous vraiment supprimer cet Engagement ";
                    IsDisabled= true;
                    break;
                }
            default:
                {
                    return ;              }
        }

    }



    async void ValidateAsync ()
    {
        switch (Parameters.Get<Actions>("Action"))
        {
            case Actions.New:
                {
                    RemindServices.SaveEngag(Engagement);
                    break;
                }
            case Actions.Edit:
                {
                    RemindServices.SaveEngag(Engagement);
                    break;
                }
            case Actions.Delete:
                {
                    RemindServices.DeleteEngag(Engagement);
                    break;
                }
            default:
                {
                    return ;              }
        }
        var liste = await RemindServices.GetEngagAsync();
        ModalService.Close(ModalResult.Ok<List<Engagement>>(liste));
    }

    void Cancel ()
    {
        ModalService.Cancel();
    }

}