@page "/api"
@inject RemindServices RemindServices
@inject IModalService Modal


@if (lesApis == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    

    <button @onclick="@(() => ShowEdit(Actions.New))" class="btn btn-primary"><span class="oi oi-plus"></span></button>
    <table class="table">
        <thead>
            <tr>
                <th>Canal</th>
                <th>Libelle</th>
                <th>Clé Sécrete</th>
                <th>Token</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Api in lesApis)
            {
            <tr>
                <td>@Api.Cannal.ToString()</td>
                <td>@Api.Name</td>
                <td>@Api.KeySecret.</td>
                <td>@Api.Token.</td>
                <td><button @onclick="@(() => ShowEdit(Actions.Edit,Api.ID))" class="btn btn-primary"><i class="oi oi-pencil"></i></button></td>
                <td><button @onclick="@(() => ShowEdit(Actions.Delete,Api.ID))" class="btn btn-danger"><i class="oi oi-trash"></i></button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    public  List<Api> lesApis;

    protected override async Task OnInitializedAsync ()
    {
        lesApis = await RemindServices.GetApiAsync();
    }
    void ShowEdit(Actions actions,int? ApiID=null)
    {
        var parameters = new ModalParameters();
        if(ApiID !=null)parameters.Add("ApiID", ApiID);
        parameters.Add("Action",actions);
        Modal.Show<ApiEdit>("Formulaire API", parameters);
        Modal.OnClose += RefreshApis;
    }

    void RefreshApis(ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            lesApis= (List<Api>) modalResult.Data ;
            this.StateHasChanged();
            
        }
        Modal.OnClose -= RefreshApis;
    }
}
